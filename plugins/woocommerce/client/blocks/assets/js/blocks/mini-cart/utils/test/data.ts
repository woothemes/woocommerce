// eslint-disable testing-library/no-dom-import
/**
 * External dependencies
 */
import { getByTestId, waitFor } from '@testing-library/dom';
import { getSettingWithCoercion } from '@woocommerce/settings';
import { CART_STORE_KEY } from '@woocommerce/block-data';
import { dispatch, select } from '@wordpress/data';
import apiFetch from '@wordpress/api-fetch';

/**
 * Internal dependencies
 */
import { migrateAttributesToColorPanel } from '../data';
import '../../frontend';

jest.mock( '@wordpress/data-controls' );
jest.mock( '@wordpress/api-fetch' );

// This is a simplified version of the response of the Cart API endpoint.
const responseMock = {
	totals: {
		total_price: '1800',
		total_items: '1400',
		total_items_tax: '200',
		currency_code: 'USD',
		currency_symbol: '$',
		currency_minor_unit: 2,
		currency_decimal_separator: '.',
		currency_thousand_separator: ',',
		currency_prefix: '$',
		currency_suffix: '',
	},
	items_count: 2,
};

// This is a simplified version of the Mini-Cart DOM generated by MiniCart.php.
const getMiniCartDOM = () => {
	const div = document.createElement( 'div' );
	div.innerHTML = `
	<div class="wc-block-mini-cart">
		<div class="wc-block-mini-cart__amount" data-testid="amount"></div>
		<div class="wc-block-mini-cart__badge" data-testid="quantity"></div>
	</div>`;
	return div;
};

jest.mock( '@woocommerce/settings', () => {
	return {
		...jest.requireActual( '@woocommerce/settings' ),
		getSettingWithCoercion: jest.fn(),
	};
} );

describe( 'Mini-Cart frontend script when "the display prices during cart and checkout" option is set to "Including Tax"', () => {
	beforeAll( () => {
		( getSettingWithCoercion as jest.Mock ).mockReturnValue( true );
	} );

	afterAll( () => {
		jest.resetModules();
	} );

	it( 'updates the cart contents based on the cart data store', async () => {
		const container = getMiniCartDOM();
		document.body.appendChild( container );

		apiFetch.mockReturnValue(
			Promise.resolve( {
				status: 200,
				json: () => Promise.resolve( responseMock ),
			} )
		);
		dispatch( CART_STORE_KEY ).invalidateResolutionForStore();
		select( CART_STORE_KEY ).getCartData();

		// Assert that we are rendering the amount.
		await waitFor( () =>
			expect( getByTestId( container, 'amount' ).textContent ).toBe(
				'$16.00'
			)
		);

		// Assert that we are rendering the quantity.
		await waitFor( () =>
			expect( getByTestId( container, 'quantity' ).textContent ).toBe(
				'2'
			)
		);

		apiFetch.mockReturnValue(
			Promise.resolve( {
				status: 200,
				json: () =>
					Promise.resolve( {
						...responseMock,
						items_count: 3,
					} ),
			} )
		);

		dispatch( CART_STORE_KEY ).invalidateResolutionForStoreSelector(
			'getCartData'
		);
		select( CART_STORE_KEY ).getCartData();

		await waitFor( () =>
			expect( getByTestId( container, 'quantity' ).textContent ).toBe(
				'3'
			)
		);
	} );
} );

describe( 'Mini-Cart frontend script when "the display prices during cart and checkout" option is set to "Excluding Tax"', () => {
	beforeAll( () => {
		( getSettingWithCoercion as jest.Mock ).mockReturnValue( false );
	} );
	it( 'updates the cart contents based on the API response', async () => {
		const container = getMiniCartDOM();
		document.body.appendChild( container );

		apiFetch.mockReturnValue(
			Promise.resolve( {
				status: 200,
				json: () => Promise.resolve( responseMock ),
			} )
		);
		dispatch( CART_STORE_KEY ).invalidateResolutionForStoreSelector(
			'getCartData'
		);
		select( CART_STORE_KEY ).getCartData();

		// Assert that we are rendering the amount.
		await waitFor( () =>
			expect( getByTestId( container, 'amount' ).textContent ).toBe(
				'$14.00'
			)
		);
		// Assert that we are rendering the quantity.
		await waitFor( () =>
			expect( getByTestId( container, 'quantity' ).textContent ).toBe(
				'2'
			)
		);
	} );
} );

const mockAttributes = {
	miniCartIcon: 'cart',
	addToCartBehaviour: 'inline',
	hasHiddenPrice: false,
	cartAndCheckoutRenderStyle: true,
	priceColorValue: '#000000',
	iconColorValue: '#ffffff',
	productCountColorValue: '#ff0000',
};
describe( 'migrateAttributesToColorPanel tests', () => {
	test( 'it correctly migrates attributes to color panel', () => {
		const migratedAttributes =
			migrateAttributesToColorPanel( mockAttributes );
		expect( migratedAttributes ).toEqual( {
			miniCartIcon: 'cart',
			addToCartBehaviour: 'inline',
			hasHiddenPrice: false,
			cartAndCheckoutRenderStyle: true,
			priceColor: {
				color: '#000000',
			},
			iconColor: {
				color: '#ffffff',
			},
			productCountColor: {
				color: '#ff0000',
			},
		} );
	} );
} );
